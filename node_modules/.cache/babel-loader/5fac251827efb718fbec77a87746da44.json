{"ast":null,"code":"import _classCallCheck from \"/home/gfonticelli/code/calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gfonticelli/code/calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gfonticelli/code/calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gfonticelli/code/calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gfonticelli/code/calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/gfonticelli/code/calendar/src/components/Calendar.jsx\";\nimport React from \"react\";\nimport dateFns from \"date-fns\";\nimport './Calendar.css';\nimport data from './data';\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  function Calendar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Calendar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentMonth: new Date(),\n      selectedDate: new Date(),\n      todayEvents: []\n    };\n\n    _this.onDateClick = function (day, events) {\n      _this.setState({\n        selectedDate: day\n      }, function () {\n        _this.renderResumen(events);\n      });\n    };\n\n    _this.nextMonth = function () {\n      _this.setState({\n        currentMonth: dateFns.addMonths(_this.state.currentMonth, 1)\n      });\n    };\n\n    _this.prevMonth = function () {\n      _this.setState({\n        currentMonth: dateFns.subMonths(_this.state.currentMonth, 1)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"formatEvents\",\n    value: function formatEvents(events) {\n      var formatedEvents = {};\n      events.map(function (event) {\n        var date = dateFns.format(event.date, 'YYYY-MM-DD');\n\n        if (formatedEvents[date] === undefined) {\n          formatedEvents[date] = [event];\n        } else {\n          formatedEvents[date].push(event);\n        }\n      });\n      return formatedEvents;\n    }\n  }, {\n    key: \"getEvents\",\n    value: function getEvents(start, end) {\n      return this.formatEvents(data);\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var dateFormat = \"MMMM YYYY\";\n      return React.createElement(\"div\", {\n        className: \"header row flex-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col col-start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon\",\n        onClick: this.prevMonth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"chevron_left\")), React.createElement(\"div\", {\n        className: \"col col-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, dateFns.format(this.state.currentMonth, dateFormat))), React.createElement(\"div\", {\n        className: \"col col-end\",\n        onClick: this.nextMonth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"chevron_right\")));\n    }\n  }, {\n    key: \"renderDays\",\n    value: function renderDays() {\n      var dateFormat = \"dddd\";\n      var days = [];\n      var startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n      for (var i = 0; i < 7; i++) {\n        days.push(React.createElement(\"div\", {\n          className: \"col col-center\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, dateFns.format(dateFns.addDays(startDate, i), dateFormat)));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"days row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, days);\n    }\n  }, {\n    key: \"renderEvents\",\n    value: function renderEvents(events, date) {\n      var todayEvents = [];\n\n      if (events[date] !== undefined) {\n        events[date].map(function (event) {\n          todayEvents.push(React.createElement(\"div\", {\n            className: 'event event-' + event.turn_type,\n            title: event.contact.name,\n            style: {\n              width: 3 * 15\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }));\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"events\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, todayEvents);\n    }\n  }, {\n    key: \"renderResumen\",\n    value: function renderResumen(events) {\n      var formatedSelectedDate = dateFns.format(this.state.selectedDate, 'YYYY-MM-DD');\n      var resumen = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \" no events today\");\n\n      if (events[formatedSelectedDate] !== undefined) {\n        var todayEvent = events[formatedSelectedDate];\n        resumen = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, todayEvent.map(function (event) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }, dateFns.format(event.date, 'HH:mm:ss'), \" - \", event.contact.name, \", \", event.turn_type);\n        }));\n      }\n\n      this.setState({\n        todayEvents: resumen\n      });\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          currentMonth = _this$state.currentMonth,\n          selectedDate = _this$state.selectedDate;\n      var monthStart = dateFns.startOfMonth(currentMonth);\n      var monthEnd = dateFns.endOfMonth(monthStart);\n      var startDate = dateFns.startOfWeek(monthStart);\n      var endDate = dateFns.endOfWeek(monthEnd);\n      var dateFormat = \"D\";\n      var rows = [];\n      var events = this.getEvents(startDate, endDate);\n      var days = [];\n      var day = startDate;\n      var formattedDate = \"\";\n\n      while (day <= endDate) {\n        var _loop = function _loop(i) {\n          formattedDate = dateFns.format(day, dateFormat);\n          var cloneDay = day;\n          var formatedDate = dateFns.format(cloneDay, 'YYYY-MM-DD');\n          days.push(React.createElement(\"div\", {\n            className: \"col cell \".concat(!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"),\n            key: day,\n            onClick: function onClick() {\n              return _this2.onDateClick(dateFns.parse(cloneDay), events);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"number\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, formattedDate), React.createElement(\"span\", {\n            className: \"bg\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }, formattedDate), _this2.renderEvents(events, formatedDate)));\n          day = dateFns.addDays(day, 1);\n        };\n\n        for (var i = 0; i < 7; i++) {\n          _loop(i);\n        }\n\n        rows.push(React.createElement(\"div\", {\n          className: \"row\",\n          key: day,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, days));\n        days = [];\n      }\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, rows);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"calendar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, this.renderHeader(), this.renderDays(), this.renderCells()), React.createElement(\"div\", {\n        className: \"dayResumen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"Resumen dia \", dateFns.format(this.state.selectedDate, 'DD-MM-YYYY')), this.state.todayEvents));\n    }\n  }]);\n\n  return Calendar;\n}(React.Component);\n\nexport default Calendar;","map":{"version":3,"sources":["/home/gfonticelli/code/calendar/src/components/Calendar.jsx"],"names":["React","dateFns","data","Calendar","state","currentMonth","Date","selectedDate","todayEvents","onDateClick","day","events","setState","renderResumen","nextMonth","addMonths","prevMonth","subMonths","formatedEvents","map","event","date","format","undefined","push","start","end","formatEvents","dateFormat","days","startDate","startOfWeek","i","addDays","turn_type","contact","name","width","formatedSelectedDate","resumen","todayEvent","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","getEvents","formattedDate","cloneDay","formatedDate","isSameMonth","isSameDay","parse","renderEvents","renderHeader","renderDays","renderCells","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport dateFns from \"date-fns\";\nimport './Calendar.css';\nimport data from './data';\n\nclass Calendar extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n    todayEvents: []\n  };\n\n  formatEvents(events) {\n    let formatedEvents = {}\n\n    events.map((event) => {\n      let date = dateFns.format(event.date, 'YYYY-MM-DD')\n      if (formatedEvents[date] === undefined) {\n        formatedEvents[date] = [event]\n      }else{\n        formatedEvents[date].push(\n          event\n        )\n      }\n    })\n\n    return formatedEvents\n  }\n\n  getEvents(start, end) {\n    return this.formatEvents(data);\n  }\n\n  renderHeader() {\n    const dateFormat = \"MMMM YYYY\";\n\n    return (\n      <div className=\"header row flex-middle\">\n        <div className=\"col col-start\">\n          <div className=\"icon\" onClick={this.prevMonth}>\n            chevron_left\n          </div>\n        </div>\n        <div className=\"col col-center\">\n          <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\n        </div>\n        <div className=\"col col-end\" onClick={this.nextMonth}>\n          <div className=\"icon\">chevron_right</div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = \"dddd\";\n    const days = [];\n\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n        </div>\n      );\n    }\n\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  renderEvents(events, date) {\n\n    let todayEvents = [];\n    if (events[date] !== undefined) {\n\n      events[date].map((event) => {\n        todayEvents.push(\n          (\n            <div\n              className={ 'event event-' + event.turn_type }\n              title={ event.contact.name }\n              style={{width: 3*15}}\n            >\n            </div>\n          )\n        )\n      })\n    }\n\n    return (\n      <div className=\"events\">\n        {todayEvents}\n      </div>\n    )\n  }\n\n  renderResumen(events) {\n\n    let formatedSelectedDate = (dateFns.format(this.state.selectedDate, 'YYYY-MM-DD'))\n\n    let resumen = (\n      <div> no events today</div>\n    )\n\n    if (events[formatedSelectedDate] !== undefined) {\n      let todayEvent = events[formatedSelectedDate]\n\n      resumen = (\n        <div>\n          {\n            todayEvent.map((event) => {\n              return (\n                <div>\n                  {dateFns.format(event.date, 'HH:mm:ss')} - {event.contact.name}, {event.turn_type}\n                </div>\n              )\n            })\n          }\n        </div>\n      )\n    }\n\n    this.setState({\n      todayEvents: resumen\n    })\n\n  }\n\n  renderCells() {\n    const { currentMonth, selectedDate } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n\n    const dateFormat = \"D\";\n    const rows = [];\n\n    const events = this.getEvents(startDate, endDate)\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        const formatedDate = dateFns.format(cloneDay, 'YYYY-MM-DD')\n        days.push(\n          <div\n            className={`col cell ${\n              !dateFns.isSameMonth(day, monthStart)\n                ? \"disabled\"\n                : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\n              }`}\n            key={day}\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay), events)}\n          >\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n            {this.renderEvents(events, formatedDate)}\n          </div>\n        );\n        day = dateFns.addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n\n  onDateClick = (day, events) => {\n\n    this.setState({\n      selectedDate: day\n    }, () => {\n      this.renderResumen(events);\n    });\n  };\n\n  nextMonth = () => {\n    this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  prevMonth = () => {\n    this.setState({\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"calendar\">\n          {this.renderHeader()}\n          {this.renderDays()}\n          {this.renderCells()}\n        </div>\n        <div className=\"dayResumen\">\n          <h2>Resumen dia {(dateFns.format(this.state.selectedDate, 'DD-MM-YYYY'))}</h2>\n          {this.state.todayEvents}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}